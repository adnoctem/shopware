name: 'Testing'

permissions: read-all

on:
  workflow_dispatch:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

defaults:
  run:
    shell: bash

concurrency:
  group: "${{ github.workflow }}@${{ github.event.pull_request.head.label || github.head_ref || github.ref }}"

jobs:
  version:
    name: Determine package version
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ steps.output-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Output version
        id: output-version
        run: |
          VERSION=$(make version)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

  test:
    runs-on: ubuntu-latest
    needs: [ 'version' ]
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        php-version: [
          8.2,
          8.3
        ]
        node-version: [
          20,
          22
        ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '${{ matrix.php-version }}'
          tools: composer

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> "$GITHUB_OUTPUT"

      - name: Cache Composer
        id: composer
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}

      - name: Set composer vars
        run: |
          {
            echo "COMPOSER_DISABLE_NETWORK=${{ steps.composer.outputs.cache-hit && '1' || '0'  }}"
            echo "COMPOSER_NO_AUDIT=1"
            echo "COMPOSER_FUND=0"
            echo "COMPOSER_ROOT_VERSION=${{ needs.version.outputs.version }}"
          } >> "$GITHUB_ENV"

      - name: Install dependencies
        run: |
          make init CI=y

      - name: Create Shopware execution environment
        uses: hoverkraft-tech/compose-action@v2.0.1
        with:
          compose-file: "./docker/compose-ci.yml"
          compose-flags: "--env-file ./env.test"

      - name: Run tests
        run: |
          make tests

  dispatch:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
    needs: [ test ]
    steps:
      - name: Dispatch a release workflow run
        if: ${{ always() && contains(join(needs.*.result, ','), 'success') }} # ref: https://github.com/actions/runner/issues/1251
        uses: actions/github-script@v7
        with:
          github-token: "${{ env.GITHUB_TOKEN }}"
          script: |
            const payload = {
              run_id: "${{ github.run_id }}",
              sha: "${{ github.sha }}"
            }

            console.log("Sending event payload", JSON.stringify(payload, null, 2));

            const { owner, repo } = context.repo;
            await github.rest.repos.createDispatchEvent({
              owner,
              repo,
              event_type: 'release',
              client_payload: payload
            });
