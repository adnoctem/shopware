services:
  traefik:
    image: traefik:v3.0.4
    container_name: traefik
    restart: always
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "./secrets/ssl:/etc/traefik/ssl"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - public
    labels:
      - "application=traefik"
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=http,https"
      - "traefik.http.routers.traefik.tls.domains[0].main=traefik.shopware.internal"
      - "traefik.http.routers.traefik.tls.domains[0].sans=*.traefik.shopware.internal"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.rule=Host(`traefik.shopware.internal`)"
    configs:
      - source: traefik.yml
        target: /etc/traefik/traefik.yml
      - source: traefik-dynamic.yml
        target: /etc/traefik/traefik-dynamic.yml
    security_opt:
      - no-new-privileges:true

  nginx:
    image: nginx:1.27
    container_name: nginx
    restart: always
    environment:
      PORT: 8000
      HOSTNAME: shopware.internal
      SOCKET_PATH: /run/php/php-fpm.sock
    ports:
      - "8000:8000"
    volumes:
      - sw-fpm-sock:/run/php:rw
    networks:
      - public
      - internal
    #    healthcheck:
    #      test:
    #        [
    #          "CMD",
    #          "curl",
    #          "--fail",
    #          "http://localhost:8000/api/_info/health-check",
    #        ]
    #      start_period: 3m
    #      interval: 1m
    #      timeout: 5s
    #      retries: 10
    labels:
      - "application=nginx"
      - "traefik.enable=true"
      - "traefik.docker.network=public"
      - "traefik.http.routers.nginx.entrypoints=https"
      - "traefik.http.routers.nginx.tls=true"
      - "traefik.http.routers.nginx.tls.domains[0].main=shopware.internal"
      #- "traefik.http.routers.shopware.tls.domains[0].sans=*.shopware.internal"
      - "traefik.http.routers.nginx.rule=Host(`shopware.internal`)"
      - "traefik.http.routers.nginx.service=nginx"
      - "traefik.http.services.nginx.loadbalancer.server.port=8000"
      - "traefik.http.services.nginx.loadbalancer.sticky=true"
      - "traefik.http.services.nginx.loadbalancer.sticky.cookie=true"
    configs:
      - source: nginx.conf
        target: /etc/nginx/nginx.conf
      - source: shopware-http.conf.tpl
        target: /etc/nginx/templates/shopware-http.conf.template

  shopware:
    image: adnoctem/shopware:0.0.1
    container_name: shopware
    env_file: .env
    # uncomment for debugging
    # entrypoint: [ "tail", "-f", "/dev/null" ]
    restart: unless-stopped
    volumes:
      - sw-docroot:/var/www/html:rw
      - sw-fpm-sock:/run/php:rw
    networks:
      - internal
    labels:
      - "application=shopware"
      - "traefik.enable=false"
    depends_on:
      nginx:
        condition: service_started
      traefik:
        condition: service_started
      mysql:
        condition: service_started
      opensearch:
        condition: service_started
      mailpit:
        condition: service_started

  mysql:
    image: mysql:${MYSQL_VERSION:-8.0}-oracle
    container_name: mysql
    restart: always
    ports:
      - "3306"
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE:-shopware}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-shopware}
      MYSQL_USER: ${MYSQL_USER:-shopware}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-shopware}
    volumes:
      - db-data:/var/lib/mysql:rw
    configs:
      - source: my.cnf
        target: /etc/mysql/my.cnf
    networks:
      - internal
    labels:
      - "application=mysql"
      - "traefik.enable=false"
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "127.0.0.1",
          "-uroot",
          "-p${MYSQL_ROOT_PASSWORD:-shopware}",
        ]
      interval: 5s
      timeout: 5s
      retries: 20

  # ref: https://hub.docker.com/r/bitnami/redis
  redis:
    image: bitnami/redis:6.2
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    environment:
      ALLOW_EMPTY_PASSWORD: "yes"
    volumes:
      - redis-data:/bitnami/redis/data
    networks:
      - internal

  # ref: https://opensearch.org/docs/latest/install-and-configure/install-opensearch/docker/#sample-docker-composeyml
  opensearch:
    image: opensearchproject/opensearch:2
    container_name: opensearch
    ports:
      - "9200" # REST API
      - "9600" # Performance Analyzer
    environment:
      OPENSEARCH_INITIAL_ADMIN_PASSWORD: "AShopware6Password!"
      discovery.type: single-node
      plugins.security.disabled: true
      OPENSEARCH_JAVA_OPTS: "-Xms512m -Xmx512m"
    volumes:
      - opensearch-data:/usr/share/opensearch/data
    networks:
      - internal
    labels:
      - "application=opensearch"
      - "traefik.enable=false"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536

  # ref: https://opensearch.org/docs/latest/install-and-configure/install-opensearch/docker/#sample-docker-composeyml
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2
    container_name: opensearch-dashboards
    ports:
      - "5601"
    environment:
      OPENSEARCH_HOSTS: '["http://opensearch:9200"]'
      DISABLE_SECURITY_DASHBOARDS_PLUGIN: true
      opensearch.username: shopware
      opensearch.password: shopware
    networks:
      - public
      - internal # needs opensearch access
    labels:
      - "application=opensearch-dashboards"
      - "traefik.enable=true"
      - "traefik.docker.network=public"
      - "traefik.http.routers.opensearch.entrypoints=https"
      - "traefik.http.routers.opensearch.tls=true"
      - "traefik.http.routers.opensearch.tls.domains[0].main=opensearch.shopware.internal"
      - "traefik.http.routers.opensearch.tls.domains[0].sans=*.opensearch.shopware.internal"
      - "traefik.http.routers.opensearch.rule=Host(`opensearch.shopware.internal`)"
      - "traefik.http.routers.opensearch.service=opensearch"
      - "traefik.http.services.opensearch.loadbalancer.server.port=5601"

  # ref: https://mailpit.axllent.org/docs/configuration/runtime-options/
  mailpit:
    image: axllent/mailpit
    container_name: mailpit
    ports:
      - "1025"
      - "8025"
    environment:
      MP_SMTP_AUTH_ACCEPT_ANY: 1
      MP_SMTP_AUTH_ALLOW_INSECURE: 1
    networks:
      - public
    labels:
      - "application=mailpit"
      - "traefik.enable=true"
      - "traefik.docker.network=public"
      - "traefik.http.routers.mailpit.entrypoints=https"
      - "traefik.http.routers.mailpit.tls=true"
      - "traefik.http.routers.mailpit.tls.domains[0].main=mailpit.shopware.internal"
      - "traefik.http.routers.mailpit.tls.domains[0].sans=*.mailpit.shopware.internal"
      - "traefik.http.routers.mailpit.rule=Host(`mailpit.shopware.internal`)"
      - "traefik.http.routers.mailpit.service=mailpit"
      - "traefik.http.services.mailpit.loadbalancer.server.port=8025"

  #  # ref: https://github.com/minio/minio/blob/master/docs/orchestration/docker-compose/docker-compose.yaml
  #  minio:
  #    image: minio/minio:latest
  #    container_name: minio
  #    ports:
  #      - "9000"
  #      - "9001"
  #    command: server /data --console-address ":9001"
  #    environment:
  #      MINIO_ACCESS_KEY: ${SHOPWARE_S3_ACCESS_KEY:-"shopware"}
  #      MINIO_SECRET_KEY: ${SHOPWARE_S3_SECRET_KEY:-"shopwareAccess"}
  #    volumes:
  #      - minio-data:/data
  #    networks:
  #      - public
  #    labels:
  #      - "application=minio"
  #      - "traefik.enable=true"
  #      - "traefik.docker.network=public"
  #      - "traefik.http.routers.minio.entrypoints=https"
  #      - "traefik.http.routers.minio.tls=true"
  #      - "traefik.http.routers.minio.tls.domains[0].main=minio.shopware.internal"
  #      - "traefik.http.routers.minio.tls.domains[0].sans=*.minio.shopware.internal"
  #      - "traefik.http.routers.minio.rule=Host(`minio.shopware.internal`)"
  #      - "traefik.http.routers.minio.service=minio"
  #      - "traefik.http.services.minio.loadbalancer.server.port=9001"
  #    healthcheck:
  #      test: [ "CMD", "mc", "ready", "local" ]
  #      interval: 5s
  #      timeout: 5s
  #      retries: 5
  #
  #  # Create initial buckets for Shopware within the MinIO console
  #  minio-setup:
  #    image: minio/minio:latest
  #    container_name: minio-setup
  #    depends_on:
  #      minio:
  #        condition: service_healthy
  #    entrypoint: >
  #      /bin/sh -c "
  #      /usr/bin/mc alias set minio http://minio:9000 ${MINIO_ACCESS_KEY:-"shopware"} ${MINIO_SECRET_KEY:-"shopwareAccess"};
  #      /usr/bin/mc rm -r --force minio/shopware;
  #      /usr/bin/mc mb minio/shopware;
  #      /usr/bin/mc anonymous set public minio/shopware;
  #      exit 0;"
  #    environment:
  #      MINIO_ACCESS_KEY: ${SHOPWARE_S3_ACCESS_KEY:-"shopware"}
  #      MINIO_SECRET_KEY: ${SHOPWARE_S3_SECRET_KEY:-"shopwareAccess"}
  #    networks:
  #      - public
  #    labels:
  #      - "application=minio-setup"
  #      - "traefik.enable=true"

  # ref: https://hub.docker.com/_/phpmyadmin
  phpmyadmin:
    image: phpmyadmin:5
    container_name: phpmyadmin
    ports:
      - "8090"
    environment:
      APACHE_PORT: 8090
      MYSQL_ROOT_PASSWORD: shopware
      PMA_HOST: mysql
      # PMA_ARBITRARY: 1
      PMA_ABSOLUTE_URI: https://phpmyadmin.shopware.internal
    networks:
      - public
      - internal # needs mysql access
    labels:
      - "application=phpmyadmin"
      - "traefik.enable=true"
      - "traefik.docker.network=public"
      - "traefik.http.routers.phpmyadmin.entrypoints=https"
      - "traefik.http.routers.phpmyadmin.tls=true"
      - "traefik.http.routers.phpmyadmin.tls.domains[0].main=phpmyadmin.shopware.internal"
      - "traefik.http.routers.phpmyadmin.tls.domains[0].sans=*.phpmyadmin.shopware.internal"
      - "traefik.http.routers.phpmyadmin.rule=Host(`phpmyadmin.shopware.internal`)"
      - "traefik.http.routers.phpmyadmin.service=phpmyadmin"
      - "traefik.http.services.phpmyadmin.loadbalancer.server.port=8090"

  # ref: https://github.com/grafana/tempo/blob/main/example/docker-compose/otel-collector/docker-compose.yaml
  grafana:
    image: grafana/grafana:11.2.0
    container_name: grafana
    ports:
      - "3000"
    deploy:
      resources:
        limits:
          memory: 100M
    restart: unless-stopped
    environment:
      GF_INSTALL_PLUGINS: grafana-opensearch-datasource
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      GF_AUTH_DISABLE_LOGIN_FORM: true
      GF_FEATURE_TOGGLES_ENABLE: traceqlEditor
      GF_SERVER_ROOT_URL: "https://grafana.shopware.internal"
    networks:
      - public
      - internal # tempo, otel-c access
    configs:
      - source: grafana-datasources.yaml
        target: /etc/grafana/provisioning/datasources/datasources.yaml
    labels:
      - "application=grafana"
      - "traefik.enable=true"
      - "traefik.docker.network=public"
      - "traefik.http.routers.grafana.entrypoints=https"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.domains[0].main=grafana.shopware.internal"
      - "traefik.http.routers.grafana.tls.domains[0].sans=*.grafana.shopware.internal"
      - "traefik.http.routers.grafana.rule=Host(`grafana.shopware.internal`)"
      - "traefik.http.routers.grafana.service=grafana"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  tempo-init:
    image: grafana/tempo:latest
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - tempo-data:/var/tempo
    labels:
      - "application=tempo-init"
      - "traefik.enable=true"

  # ref: https://github.com/grafana/tempo/blob/main/example/docker-compose/otel-collector/docker-compose.yaml
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - tempo-data:/var/tempo
    ports:
      - "14268" # jaeger ingest
      - "3200" # tempo
      - "4317" # otlp grpc
      - "4318" # otlp http
      - "9411" # zipkin
    configs:
      - source: tempo.yaml
        target: /etc/tempo.yaml
    networks:
      - internal
    depends_on:
      tempo-init:
        condition: service_completed_successfully
    labels:
      - "application=tempo"
      - "traefik.enable=false"

  # ref: https://github.com/grafana/tempo/blob/main/example/docker-compose/otel-collector/docker-compose.yaml
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
      - --enable-feature=native-histograms
    configs:
      - source: prometheus.yaml
        target: /etc/prometheus.yaml
    ports:
      - "9090"
    networks:
      - public
      - internal # otel-c access
    labels:
      - "application=prometheus"
      - "traefik.enable=true"
      - "traefik.docker.network=public"
      - "traefik.http.routers.prometheus.entrypoints=https"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.tls.domains[0].main=prometheus.shopware.internal"
      - "traefik.http.routers.prometheus.tls.domains[0].sans=*.prometheus.shopware.internal"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.shopware.internal`)"
      - "traefik.http.routers.prometheus.service=prometheus"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  # ref: https://github.com/grafana/tempo/blob/main/example/docker-compose/otel-collector/docker-compose.yaml
  otel-collector:
    image: otel/opentelemetry-collector:0.117.0
    container_name: otel-collector
    restart: always
    command: [ "--config=/etc/otel-collector.yaml" ]
    configs:
      - source: otel-collector-config.yaml
        target: /etc/otel-collector.yaml
    ports:
      - "4317" # OTLP gRPC receiver
    networks:
      - internal
    depends_on:
      grafana:
        condition: service_started
      tempo:
        condition: service_started
    labels:
      - "application=otel-collector"
      - "traefik.enable=false"

configs:
  traefik.yml:
    file: deploy/conf/traefik.yml
  traefik-dynamic.yml:
    file: deploy/conf/traefik-dynamic.yml
  grafana-datasources.yaml:
    file: deploy/conf/grafana-datasources.yaml
  tempo.yaml:
    file: deploy/conf/tempo.yaml
  prometheus.yaml:
    file: deploy/conf/prometheus.yaml
  otel-collector-config.yaml:
    file: deploy/conf/otel-collector-config.yaml
  my.cnf:
    file: deploy/conf/my.cnf
  nginx.conf:
    file: deploy/conf/nginx.conf
  shopware-http.conf.tpl:
    file: deploy/conf/shopware-http.conf.tpl

# cannot be created inline reliably, because they produce a mount error with Docker Desktop + WSL2
# ERROR: response from daemon: path /.../home/fmj/Software/Code/FMJStudios/shopware/secrets/ssl/server.pem is mounted on / but it is not a shared mount.
#secrets:
#  traefik-server.pem:
#    file: ./secrets/ssl/server.pem
#  traefik-server-key.pem:
#    file: ./secrets/ssl/server-key.pem

volumes:
  sw-docroot:
  sw-fpm-sock:
  db-data:
  opensearch-data:
  tempo-data:
  minio-data:
  redis-data:

networks:
  public:
    external: true
  internal:
